from . import replies as replies
from .model import Gaps as Gaps, Rect as Rect
from _typeshed import Incomplete
from typing import List, Optional

class Con:
    ipc_data: Incomplete
    parent: Incomplete
    marks: Incomplete
    type: str
    nodes: Incomplete
    floating_nodes: Incomplete
    window_class: Incomplete
    window_instance: Incomplete
    window_role: Incomplete
    window_title: Incomplete
    rect: Incomplete
    window_rect: Incomplete
    deco_rect: Incomplete
    geometry: Incomplete
    gaps: Incomplete
    # ipc properties
    border: Incomplete
    current_border_width: Incomplete
    floating: Incomplete
    focus: Incomplete
    focused: Incomplete
    fullscreen_mode: Incomplete
    id: Incomplete
    layout: Incomplete
    name: Incomplete
    num: Incomplete
    orientation: Incomplete
    percent: Incomplete
    scratchpad_state: Incomplete
    sticky: Incomplete
    urgent: Incomplete
    window: Incomplete
    pid: Incomplete
    app_id: Incomplete
    representation: Incomplete

    def __init__(self, data, parent, conn) -> None: ...
    def __iter__(self): ...
    def root(self) -> Con: ...
    def descendants(self) -> List['Con']: ...
    def descendents(self) -> List['Con']: ...
    def leaves(self) -> List['Con']: ...
    def command(self, command: str) -> List[replies.CommandReply]: ...
    def command_children(self, command: str) -> List[replies.CommandReply]: ...
    def workspaces(self) -> List['Con']: ...
    def find_focused(self) -> Optional['Con']: ...
    def find_by_id(self, id: int) -> Optional['Con']: ...
    def find_by_pid(self, pid: int) -> List['Con']: ...
    def find_by_window(self, window: int) -> Optional['Con']: ...
    def find_by_role(self, pattern: str) -> List['Con']: ...
    def find_named(self, pattern: str) -> List['Con']: ...
    def find_titled(self, pattern: str) -> List['Con']: ...
    def find_classed(self, pattern: str) -> List['Con']: ...
    def find_instanced(self, pattern: str) -> List['Con']: ...
    def find_marked(self, pattern: str = '.*') -> List['Con']: ...
    def find_fullscreen(self) -> List['Con']: ...
    def workspace(self) -> Optional['Con']: ...
    def scratchpad(self) -> Con: ...
